###############################################################################
;RABBITMQ SECTION
;This section contains specific options for rabbitmq.
;WARNING: Some of these options can be overriden if the bootstrap section is
;used.
###############################################################################
[rabbitmq]

;These options set the paths in which pem files will be stored
#cacertfile = /etc/synapse/ssl/certs/cacert.pem
#certfile = /etc/synapse/ssl/certs/cert.pem
#csrfile = /etc/synapse/ssl/csr/csr.pem
#keyfile = /etc/synapse/ssl/private/key.pem

;Check whether or not the server asks for a certificate from the client.
#fail_if_no_peer_cert = True

;Rabbitmq will kill the TCP socket if there's no trafic during this number of
;seconds. This prevent fantom connections to remain active.
#heartbeat = 30

;The rabbitmq hostname
#host = localhost

;Username/password to connect to the specified vhost
#username = guest
#password = guest
#port = 5672

;Use SSL encryption ?
#use_ssl = False

;Use SSL authentication ? This requires the server to have the
;ssl_auth_mechanism_plugin enabled.
#ssl_auth = False

;Synapse will publish its status messages into this exchange with 
;this routing key
#status_exchange = inbox
#status_routing_key =

;Synapse will publish its compliance messages into the status exchange with
;this routing key
#compliance_routing_key =

;Synapse will try to consume from this queue
#uuid = 

;Synapse will initiate the AMQP connection to this vhost.
#vhost = /

;Synapse will bind its queue to this exchange
#exchange = amq.fanout

###############################################################################
;RESOURCEFILE SECTION
;This is the setup.json "one time" synapse run options section
###############################################################################
[resourcefile]

;The path to the setup.json file on the system
#path = /tmp/setup.json

;The url to the setup.json file on the system
#url = http://localhost/setup.json

;Synapse will try to reach the url for this number of seconds
#timeout = 10

###############################################################################
;CONTROLLER SECTION
;This section contains options for managing resources-plugins
###############################################################################
[controller]

;This very config file path
config_file = /data/PROJETS/ComodIT/synapse-agent/conf/synapse-agent.conf

;Path to custom plugins
custom_plugins = /data/PROJETS/ComodIT/synapse-agent/custom_plugins/

;Override these to force the instantiation of plugins for a specific OS
#distribution_name =
#distribution_version =

;Synapse automatically loads every plugin it finds. There are some built-in
;plugins in synapse source folder, the rest in is the custom_plugins 
;path. Just specify a list of comma separated plugin names not to load them 
;at synapse
;startup. Example: services-plugin,hosts-plugin
#ignored_resources =

;Resources states will be stored in this path
#persistence_path = /var/lib/synapse/persistence

###############################################################################
;LOGGING SECTION
;This section sets logging options
###############################################################################
[logconf]

;Loglevel
#level = INFO

;Path to log files
#path = /var/log/synapse/log/

###############################################################################
;MONITORING SECTION
;This section sets monitoring options
###############################################################################
[monitor]

;By default, every resource state will be checked by this number of seconds
#default_interval = 30

;Once a compliance message is sent, it won't be sent again before this
;interval (in seconds)
#alert_interval = 3600

;Publish statuses into status_exchange with status_routing_key
#publish_status = False

;Enable the resources compliance alerting system
#enable_compliance = False

;You can add custom interval for any resource managed by synapse simply
;by specifying its name and the number of seconds. The following example 
;will check packages states every 20 seconds and send host status every 10
;seconds (this was formerly the ping_cortex options)
#packages = 20
#hosts = 10
